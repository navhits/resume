name: Page & Resume builder

on:
  workflow_dispatch:
  push:
    branches:
      - main
  
jobs:
  page-resume-build:
    name: Page & Resume builder
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Setup Pip
        run: |
          python -m pip install --upgrade pip
        
      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qqy
          sudo apt-get -qqy install google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version)
          CHROME_FULL_VERSION=${CHROME_VERSION%%.*}
          CHROME_MAJOR_VERSION=${CHROME_FULL_VERSION//[!0-9]}
          sudo rm /etc/apt/sources.list.d/google-chrome.list
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          chromedriver --version

      - name: Run Script
        run: |
          DEPLOYMENT_ID=$(curl -X POST $DEPLOY_HOOK | jq -r '.result.id')
          GET_DEPLOYMENT_INFO_URL="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/resume/deployments/${DEPLOYMENT_ID}"
          # Using an API token with scope limited to Read only to Cloudflare Pages
          TOKEN_VERIFY=$(curl -X GET "https://api.cloudflare.com/client/v4/user/tokens/verify" -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type:application/json" | jq -r '.success')
          if [ "$TOKEN_VERIFY" = true ] ; then
            export DEPLOYMENT_URL=$(curl -X GET $GET_DEPLOYMENT_INFO_URL -H "Authorization: Bearer ${CF_API_TOKEN}" | jq -r '.result.url')
            cd scripts && pip install -r requirements.txt && python html2pdf.py
            echo "## Deployment successful :rocket:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "View current deployment at [${DEPLOYMENT_URL}](${DEPLOYMENT_URL})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

          else
            echo "## Deployment failed :broken_heart:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed to build page as API token verification failed." >> $GITHUB_STEP_SUMMARY
            echo "Please check your Cloudflare API token and run this job." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        
        env:
          API_KEY: ${{ secrets.API_KEY }}
          SOURCE: ${{ secrets.SOURCE }}
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET}}
